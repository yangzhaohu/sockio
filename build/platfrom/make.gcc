CC  := gcc
CXX := g++

# dynamic
# -fPIC -Wl,-z,defs -shared

# exec
# -fPIE

FLAGS += -DLINUX
CFLAGS += $(FLAGS)
CXXFLAGS += $(FLAGS)

LIBS +=

OBJS := $(SRCS:%.c=$(TMPLIB_DIR)%.o)
OBJS := $(OBJS:%.cpp=$(TMPLIB_DIR)%.o)

$(TMPLIB_DIR)%.o : %.c
	@set -e; mkdir -p $(dir $@);
	$(CC) -MMD -c $< $(INCLUDES) $(CFLAGS) -o $@

$(TMPLIB_DIR)%.o : %.cpp
	@set -e; mkdir -p $(dir $@);
	$(CXX) -MMD -c $< $(INCLUDES) $(CXXFLAGS) -o $@

build: $(OBJS)
	$(CXX) $(OBJS) $(LIBPATH) $(LIBS) $(LFLAGS) -o $(TARGET).so
	$(shell mkdir -p .debug)
	objcopy --only-keep-debug $(TARGET).so .debug/$(TARGET).so
	strip $(TARGET).so
	objcopy --add-gnu-debuglink=.debug/$(TARGET).so $(TARGET).so

clean:
	@set -e; rm -rf $(DEPS) $(OBJS) $(TARGET).so .debug

#中间目标依赖文件.d
DEPS := $(SRCS:%.c=$(TMPLIB_DIR)%.d)
DEPS := $(DEPS:%.cpp=$(TMPLIB_DIR)%.d)

-include $(DEPS)